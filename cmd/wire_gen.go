// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"akigate"
	"akigate/reverseProxy"
	"akigate/route"
	"github.com/google/wire"
	"github.com/gutrse3321/aki/pkg/app"
	"github.com/gutrse3321/aki/pkg/config"
	"github.com/gutrse3321/aki/pkg/log"
	"github.com/gutrse3321/aki/pkg/transports/http"
)

// Injectors from wire.go:

func CreateApp(configPath string) (*app.Application, error) {
	viper, err := config.New(configPath)
	if err != nil {
		return nil, err
	}
	options, err := log.NewOptions(viper)
	if err != nil {
		return nil, err
	}
	logger, err := log.New(options)
	if err != nil {
		return nil, err
	}
	appOptions, err := akigate.NewOptions(viper, logger)
	if err != nil {
		return nil, err
	}
	httpOptions, err := http.NewOptions(viper)
	if err != nil {
		return nil, err
	}
	reverseProxyReverseProxy := reverseProxy.NewReverseProxy()
	routesOption, err := route.NewRoutesOption(viper)
	if err != nil {
		return nil, err
	}
	routesMap := route.NewRoutesMap(routesOption)
	entry := route.NewEntry(reverseProxyReverseProxy, routesMap)
	initControllers := route.CreateInitControllersFn(entry)
	engine := http.NewRouter(httpOptions, logger, initControllers)
	server, err := http.New(httpOptions, logger, engine)
	if err != nil {
		return nil, err
	}
	application, err := akigate.NewApp(appOptions, logger, server)
	if err != nil {
		return nil, err
	}
	return application, nil
}

// wire.go:

var wireSet = wire.NewSet(log.WireSet, config.WireSet, http.WireSet, akigate.WireSet)
